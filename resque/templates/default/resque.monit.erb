<% 1.upto(@worker_amount.to_i) do |worker| %>
check process resque_worker_<%= @application %><%= @queue_name %>_<%= worker %>
  with pidfile <%= @deploy[:deploy_to] %>/current/tmp/pids/resque_worker_<%= @queue_name %>_<%= worker %>.pid
  start program = "/usr/local/sbin/resquectl start <%= @deploy[:deploy_to] %> <%= @deploy[:rails_env] %> '<%= @queue_name %>' <%= @queue_name != "" ? "#{@queue_name}_#{worker}" : worker %>" as uid <%= @deploy[:user] %> and gid <%= @deploy[:group] %>
  stop program = "/usr/local/sbin/resquectl stop <%= @deploy[:deploy_to] %> <%= @queue_name != "" ? "#{@queue_name}_#{worker}" : worker %>"
  if totalmem is greater than <%= node[:resque][:max_memory] %> MB for 10 cycles then restart
  group resque_workers_<%= @application %>
<% end %>

<% if has_scheduler %>
check process resque_schedule_worker_<%= @application %>
  with pidfile <%= @deploy[:deploy_to] %>/current/tmp/pids/resque_schedule_worker.pid
  start program = "/usr/local/sbin/resque-schedule start <%= @deploy[:deploy_to] %> <%= @deploy[:rails_env] %> as uid <%= @deploy[:user] %> and gid <%= @deploy[:group] %>
  stop program = "/usr/local/sbin/resque-schedule stop <%= @deploy[:deploy_to] %>
  if totalmem is greater than <%= node[:resque][:max_memory] %> MB for 10 cycles then restart
  group resque_workers_<%= @application %>
<% end %>