backend default {
  .host = "127.0.0.1";
  .port = "8080";
}


sub vcl_recv {
    set req.backend = default;
    
    if (req.request == "PURGE") {
             purge("req.url == " req.url);
	     error 200 "Purged.";
		return (lookup);
	}

    if (req.http.x-forwarded-for) {
	set req.http.X-Forwarded-For =
	    req.http.X-Forwarded-For ", " client.ip;
    } else {
	set req.http.X-Forwarded-For = client.ip;
    }
    if (req.request != "GET" &&
      req.request != "HEAD" &&
      req.request != "PUT" &&
      req.request != "POST" &&
      req.request != "TRACE" &&
      req.request != "OPTIONS" &&
      req.request != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }
    if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return (pass);
    }
    if (req.http.Authorization) {
        /* Not cacheable by default */
        return (pass);
    }
    return (lookup);
}

sub vcl_pipe {
    # Note that only the first request to the backend will have
    # X-Forwarded-For set.  If you use X-Forwarded-For and want to
    # have it set for all requests, make sure to have:
    # set req.http.connection = "close";
    # here.  It is not set by default as it might break some broken web
    # applications, like IIS with NTLM authentication.
    return (pipe);
}

sub vcl_pass {
    return (pass);
}

sub vcl_hash {
    set req.hash += req.url;
    if (req.http.host) {
        set req.hash += req.http.host;
    } else {
        set req.hash += server.ip;
    }
    return (hash);
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }
    return (deliver);
}

sub vcl_hit {
  if (!obj.cacheable) {
    return (pass);
  }

  return (deliver);
}



sub vcl_fetch {
    if (req.url == "/news.partial") {
        # Add a Content-Encoding to match compressed SVG
        set beresp.ttl = 3600s;
        set beresp.http.Cache-Control = "max-age=3600, public";
    }

    if( beresp.http.X-Strip-Cookies ) {
      remove beresp.http.X-Strip-Cookies;
      unset beresp.http.Set-Cookie;
      return (deliver);
    }

    if (!beresp.cacheable) {
        return (pass);
    }

    if (beresp.http.Set-Cookie) {
        return (pass);
    }
}


sub vcl_error {
    set obj.http.Content-Type = "text/html; charset=utf-8";
    synthetic {"
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>"} obj.status " " obj.response {"</title>
  </head>
  <body>
    <h1>Error "} obj.status " " obj.response {"</h1>
    <p>"} obj.response {"</p>
    <h3>Guru Meditation:</h3>
    <p>XID: "} req.xid {"</p>
    <hr>
    <address>
       <a href="http://www.varnish-cache.org/">Varnish cache server</a>
    </address>
  </body>
</html>
"};
    return (deliver);
}

